import { App, Modal, Setting, Notice } from 'obsidian';
import WorkoutTrackerPlugin from '../main';
import { WorkoutEntry } from '../types';

export class QuickWorkoutModal extends Modal {
  plugin: WorkoutTrackerPlugin;
  workoutDate: string;
  muscleGroup: string = '';
  notes: string = '';

  constructor(app: App, plugin: WorkoutTrackerPlugin, date?: string) {
    super(app);
    this.plugin = plugin;
    this.workoutDate = date || new Date().toISOString().split('T')[0];
  }

  onOpen() {
    const { contentEl } = this;
    contentEl.empty();

    contentEl.createEl('h2', { text: '–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' });

    new Setting(contentEl)
      .setName('–î–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
      .setDesc('–î–∞—Ç–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞')
      .addText(text => text
        .setValue(this.workoutDate)
        .onChange((value) => {
          this.workoutDate = value;
        }));

    new Setting(contentEl)
      .setName('–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
      .setDesc('–ì—Ä—É–ø–ø–∞ –º—ã—à—Ü –∏–ª–∏ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
      .addDropdown(dropdown => {
        dropdown
          .addOption('', '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø...')
          .addOption('–≥—Ä—É–¥—å', '–ì—Ä—É–¥—å')
          .addOption('—Å–ø–∏–Ω–∞', '–°–ø–∏–Ω–∞')
          .addOption('–Ω–æ–≥–∏', '–ù–æ–≥–∏')
          .addOption('–ø–ª–µ—á–∏', '–ü–ª–µ—á–∏')
          .addOption('—Ä—É–∫–∏', '–†—É–∫–∏')
          .addOption('–ø—Ä–µ—Å—Å', '–ü—Ä–µ—Å—Å')
          .addOption('–∫–∞—Ä–¥–∏–æ', '–ö–∞—Ä–¥–∏–æ')
          .addOption('–¥—Ä—É–≥–æ–µ', '–î—Ä—É–≥–æ–µ')
          .setValue(this.muscleGroup)
          .onChange((value) => {
            this.muscleGroup = value;
          });
      });

    new Setting(contentEl)
      .setName('–ó–∞–º–µ—Ç–∫–∏')
      .setDesc('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ')
      .addTextArea(text => text
        .setPlaceholder('–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —Ü–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏...')
        .setValue(this.notes)
        .onChange((value) => {
          this.notes = value;
        }));

    const actionsContainer = contentEl.createDiv({ cls: 'workout-quick-actions' });

    new Setting(actionsContainer)
      .addButton(btn => btn
        .setButtonText('–î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é')
        .setCta()
        .onClick(() => {
          this.createWorkout('planned');
        }))
      .addButton(btn => btn
        .setButtonText('–î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é')
        .onClick(() => {
          this.createWorkout('done');
        }))
      .addButton(btn => btn
        .setButtonText('–û—Ç–º–µ–Ω–∞')
        .onClick(() => {
          this.close();
        }));

    // –ï—Å–ª–∏ –¥–∞—Ç–∞ - —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ —Ä–∞–Ω—å—à–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    const today = new Date().toISOString().split('T')[0];
    if (this.workoutDate <= today) {
      contentEl.createEl('p', { 
        text: 'üí° –°–æ–≤–µ—Ç: –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –¥–∞—Ç –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"',
        cls: 'workout-hint'
      });
    }
  }

  async createWorkout(status: 'planned' | 'done') {
    if (!this.muscleGroup) {
      new Notice('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
      return;
    }

    try {
      const workout: WorkoutEntry = {
        status: status,
        type: this.muscleGroup,
        notes: this.notes || undefined
      };

      await this.plugin.dataManager.addWorkout(this.workoutDate, workout);
      
      new Notice(`–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${status === 'done' ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' : '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞'} –Ω–∞ ${this.workoutDate}`);
      this.close();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–ª–∞–≥–∏–Ω–∞ –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
      const workoutView = this.app.workspace.getLeavesOfType('workout-tracker-view')[0];
      if (workoutView) {
        // @ts-ignore
        workoutView.view.refresh();
      }
      
    } catch (error) {
      console.error('Error creating quick workout:', error);
      new Notice('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
    }
  }

  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
}