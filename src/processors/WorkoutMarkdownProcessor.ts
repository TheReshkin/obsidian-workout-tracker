import { MarkdownPostProcessorContext, Plugin } from 'obsidian';
import { WorkoutData, WorkoutEntry, WorkoutStatus } from '../types';
import { WorkoutDataUtils } from '../utils/data-utils';
import { InlineWorkoutEditor } from './InlineWorkoutEditor';
import { ExerciseLibraryManager } from './ExerciseLibraryManager';
import WorkoutTrackerPlugin from '../main';

/**
 * –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–ª–æ–∫–æ–≤ ```workout –≤ markdown —Ñ–∞–π–ª–∞—Ö
 */
export class WorkoutMarkdownProcessor {
  private plugin: WorkoutTrackerPlugin;
  private currentView: 'calendar' | 'list' | 'stats' = 'calendar';
  private currentDate: Date = new Date(); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  private displayMode: 'week' | 'month' | 'year' = 'week'; // –†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è

  constructor(plugin: WorkoutTrackerPlugin) {
    this.plugin = plugin;
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä markdown –¥–ª—è –±–ª–æ–∫–æ–≤ workout
   */
  register() {
    this.plugin.registerMarkdownCodeBlockProcessor('workout', (source, el, ctx) => {
      this.processWorkoutBlock(source, el, ctx);
    });
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    this.plugin.registerMarkdownCodeBlockProcessor('exercises', (source, el, ctx) => {
      this.processExercisesBlock(source, el, ctx);
    });
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–ª–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
   */
  private async processWorkoutBlock(
    source: string, 
    element: HTMLElement, 
    context: MarkdownPostProcessorContext
  ) {
    try {
      const workoutData: WorkoutData = JSON.parse(source);
      
      // –û—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
      element.empty();
      
      // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
      this.createInteractiveWorkoutView(element, workoutData, context, source);
      
    } catch (error) {
      console.error('Error parsing workout data:', error);
      element.createEl('div', { 
        text: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫', 
        cls: 'workout-error' 
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–ª–æ–∫ —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
   */
  private async processExercisesBlock(
    source: string,
    element: HTMLElement,
    context: MarkdownPostProcessorContext
  ) {
    try {
      // –û—á–∏—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
      element.empty();
      
      // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
      const libraryManager = new ExerciseLibraryManager(this.plugin);
      await libraryManager.render(element, context);
      
    } catch (error) {
      console.error('Error rendering exercise library:', error);
      element.createEl('div', { 
        text: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π', 
        cls: 'workout-error' 
      });
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–∏–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
   */
  private createInteractiveWorkoutView(
    container: HTMLElement, 
    workoutData: WorkoutData, 
    context: MarkdownPostProcessorContext,
    originalSource: string
  ) {
    container.addClass('workout-interactive-view');

    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const blockKey = context.sourcePath + ':' + (context.frontmatter?.position?.start?.line?.toString() || '0');

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const editor = new InlineWorkoutEditor(
      this.plugin,
      container,
      workoutData,
      context,
      originalSource
    );

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const header = container.createDiv({ cls: 'workout-header' });
    header.createEl('h3', { text: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', cls: 'workout-title' });
    
    const controls = header.createDiv({ cls: 'workout-controls' });
    
    // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    const addBtn = controls.createEl('button', { 
      text: '+ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
      cls: 'workout-btn workout-btn-primary'
    });
    addBtn.addEventListener('click', () => {
      editor.showAddWorkoutForm();
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–∞
    const viewSwitcher = controls.createDiv({ cls: 'workout-view-switcher' });
    this.createViewSwitcher(viewSwitcher, container, workoutData, context, editor);

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    const dataContainer = container.createDiv({ cls: 'workout-data-container' });
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–∏–¥
    this.renderCalendarView(dataContainer, workoutData, context, editor);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∏–¥–æ–≤
   */
  private createViewSwitcher(
    container: HTMLElement, 
    mainContainer: HTMLElement,
    workoutData: WorkoutData, 
    context: MarkdownPostProcessorContext,
    editor: InlineWorkoutEditor
  ) {
    const views = [
      { id: 'calendar', label: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å', icon: 'üìÖ' },
      { id: 'list', label: '–°–ø–∏—Å–æ–∫', icon: 'üìã' },
      { id: 'stats', label: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', icon: 'üìä' }
    ];

    let currentView = 'calendar';

    views.forEach(view => {
      const btn = container.createEl('button', {
        text: `${view.icon} ${view.label}`,
        cls: `workout-view-btn ${currentView === view.id ? 'active' : ''}`
      });

      btn.addEventListener('click', () => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        container.querySelectorAll('.workout-view-btn').forEach(b => b.removeClass('active'));
        btn.addClass('active');
        currentView = view.id;
        this.currentView = view.id as 'calendar' | 'list' | 'stats';

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        const dataContainer = mainContainer.querySelector('.workout-data-container') as HTMLElement;
        if (dataContainer) {
          dataContainer.empty();
          this.renderView(view.id, dataContainer, workoutData, context, editor);
        }
      });
    });
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∏–¥
   */
  private renderView(viewId: string, container: HTMLElement, workoutData: WorkoutData, context: MarkdownPostProcessorContext, editor: InlineWorkoutEditor) {
    switch (viewId) {
      case 'calendar':
        this.renderCalendarView(container, workoutData, context, editor);
        break;
      case 'list':
        this.renderListView(container, workoutData, context, editor);
        break;
      case 'stats':
        this.renderStatsView(container, workoutData, context, editor);
        break;
    }
  }

    /**
   * –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–∏–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
   */
  private renderCalendarView(container: HTMLElement, workoutData: WorkoutData, context: MarkdownPostProcessorContext, editor: InlineWorkoutEditor) {
    container.addClass('workout-calendar-view');

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    let navigationContainer = container.querySelector('.workout-navigation') as HTMLElement;
    if (!navigationContainer) {
      navigationContainer = container.createDiv({ cls: 'workout-navigation' });
      this.createNavigationControls(navigationContainer, container, workoutData, context, editor);
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–µ–¥–µ–ª—å
    this.renderWeeksContent(container, workoutData, context, editor);
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–µ–ª—å
   */
  private renderWeeksContent(container: HTMLElement, workoutData: WorkoutData, context: MarkdownPostProcessorContext, editor: InlineWorkoutEditor) {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ–¥–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingWeeks = container.querySelector('.workout-weeks-container');
    if (existingWeeks) {
      existingWeeks.remove();
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –Ω–µ–¥–µ–ª—å
    const weeksContainer = container.createDiv({ cls: 'workout-weeks-container' });

    if (this.displayMode === 'year') {
      this.renderYearView(weeksContainer, workoutData, context, editor);
    } else {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const weeksToShow = this.displayMode === 'month' ? 4 : 1;
      
      for (let weekOffset = 0; weekOffset < weeksToShow; weekOffset++) {
        const weekStart = new Date(this.currentDate);
        weekStart.setDate(weekStart.getDate() + (weekOffset * 7));
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
        const dayOfWeek = weekStart.getDay();
        const mondayOffset = dayOfWeek === 0 ? -6 : -(dayOfWeek - 1);
        weekStart.setDate(weekStart.getDate() + mondayOffset);

        this.renderSingleWeek(weeksContainer, weekStart, workoutData, context, editor);
      }
    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–¥–Ω—É –Ω–µ–¥–µ–ª—é
   */
  private renderSingleWeek(
    container: HTMLElement, 
    weekStart: Date, 
    workoutData: WorkoutData, 
    context: MarkdownPostProcessorContext, 
    editor: InlineWorkoutEditor
  ) {
    const weekDates = this.getWeekDates(weekStart);
    const weekContainer = container.createDiv({ cls: 'workout-week' });

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ—Å—è—á–Ω–æ–≥–æ –≤–∏–¥–∞)
    if (this.displayMode === 'month') {
      const weekHeader = weekContainer.createDiv({ cls: 'workout-week-header' });
      const startDate = new Date(weekDates[0]);
      const endDate = new Date(weekDates[6]);
      weekHeader.textContent = `${this.formatDateShort(startDate)} - ${this.formatDateShort(endDate)}`;
    }

    weekDates.forEach(dateStr => {
      const dayContainer = weekContainer.createDiv({ cls: 'workout-day' });
      const date = new Date(dateStr);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º
      const today = new Date();
      const isToday = dateStr === today.toISOString().split('T')[0];
      if (isToday) {
        dayContainer.addClass('today');
      }
      
      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
      const dayHeader = dayContainer.createDiv({ cls: 'workout-day-header' });
      dayHeader.createSpan({ text: this.getDayName(date), cls: 'day-name' });
      dayHeader.createSpan({ text: date.getDate().toString(), cls: 'day-number' });

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –¥–Ω–µ–π –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Å—è—Ü–µ–≤
      if (date.getMonth() !== this.currentDate.getMonth()) {
        dayHeader.addClass('other-month');
      }

      // –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      const workout = workoutData[dateStr];
      const dayContent = dayContainer.createDiv({ cls: 'workout-day-content' });

      // –î–æ–±–∞–≤–ª—è–µ–º drop zone
      this.setupDropZone(dayContent, dateStr, workoutData, editor);

      if (workout) {
        this.renderWorkoutCard(dayContent, workout, dateStr, workoutData, context, editor, true);
      } else {
        // –ü—É—Å—Ç–æ–π –¥–µ–Ω—å —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        const emptyDay = dayContent.createDiv({ cls: 'workout-empty-day' });
        const addBtn = emptyDay.createEl('button', {
          text: '+',
          cls: 'workout-add-btn'
        });
        addBtn.addEventListener('click', () => {
          editor.showAddWorkoutForm(dateStr);
        });
      }
    });
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥–æ–¥–æ–≤–æ–π –≤–∏–¥ —Å –º–µ—Å—è—Ü–∞–º–∏
   */
  private renderYearView(container: HTMLElement, workoutData: WorkoutData, context: MarkdownPostProcessorContext, editor: InlineWorkoutEditor) {
    container.addClass('workout-year-view');
    
    const year = this.currentDate.getFullYear();
    const monthNames = [
      '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
      '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];

    const monthsGrid = container.createDiv({ cls: 'workout-year-months' });

    for (let month = 0; month < 12; month++) {
      const monthContainer = monthsGrid.createDiv({ cls: 'workout-year-month' });
      
      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Å—è—Ü–∞
      const monthHeader = monthContainer.createDiv({ cls: 'workout-month-header' });
      monthHeader.textContent = monthNames[month];
      
      // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
      const currentDate = new Date();
      if (year === currentDate.getFullYear() && month === currentDate.getMonth()) {
        monthContainer.addClass('current-month');
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∑–∞ –º–µ—Å—è—Ü
      const monthStats = this.getMonthWorkoutStats(year, month, workoutData);
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–æ—Å–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      const workoutBars = monthContainer.createDiv({ cls: 'workout-month-bars' });
      
      if (monthStats.totalWorkouts === 0) {
        workoutBars.createDiv({ 
          cls: 'workout-month-empty',
          text: '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π'
        });
      } else {
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        Object.entries(monthStats.workoutTypes).forEach(([type, count]) => {
          const bar = workoutBars.createDiv({ cls: 'workout-type-bar' });
          bar.setAttribute('data-type', type);
          bar.style.width = `${(count / monthStats.totalWorkouts) * 100}%`;
          bar.title = `${type}: ${count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫`;
        });
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Å—è—Ü–∞
      const monthSummary = monthContainer.createDiv({ cls: 'workout-month-summary' });
      monthSummary.innerHTML = `
        <div class="month-stat">
          <span class="stat-number">${monthStats.totalWorkouts}</span>
          <span class="stat-label">—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</span>
        </div>
        <div class="month-stat">
          <span class="stat-number">${monthStats.completedWorkouts}</span>
          <span class="stat-label">–≤—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
        </div>
      `;

      // –ö–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –º–µ—Å—è—Ü—É
      monthContainer.addEventListener('click', () => {
        this.displayMode = 'month';
        this.currentDate = new Date(year, month, 1);
        this.refreshCalendarView(container.closest('.workout-weeks-container')!.parentElement!, workoutData, context, editor);
      });
    }
  }

  private setupDropZone(element: HTMLElement, targetDate: string, workoutData: any, editor: InlineWorkoutEditor) {
    element.classList.add('workout-drop-zone');
    
    element.addEventListener('dragover', (e) => {
      e.preventDefault();
      element.classList.add('workout-dropping');
    });

    element.addEventListener('dragleave', (e) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ —ç–ª–µ–º–µ–Ω—Ç
      if (!element.contains(e.relatedTarget as Node)) {
        element.classList.remove('workout-dropping');
      }
    });

    element.addEventListener('drop', (e) => {
      e.preventDefault();
      element.classList.remove('workout-dropping');
      
      const sourceDate = e.dataTransfer?.getData('text/plain');
      if (sourceDate && sourceDate !== targetDate) {
        this.moveWorkout(sourceDate, targetDate, workoutData, editor);
      }
    });
  }

  private moveWorkout(sourceDate: string, targetDate: string, workoutData: any, editor: InlineWorkoutEditor) {
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
    const workoutToMove = workoutData[sourceDate];
    if (workoutToMove) {
      // –ï—Å–ª–∏ –≤ —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç–µ —É–∂–µ –µ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      if (workoutData[targetDate]) {
        const confirmed = confirm('–í —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –µ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞. –ó–∞–º–µ–Ω–∏—Ç—å –µ—ë?');
        if (!confirmed) return;
      }

      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º
      workoutData[targetDate] = workoutToMove;
      delete workoutData[sourceDate];

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      editor.updateWorkoutData(workoutData);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –º–µ—Å—è—Ü
   */
  private getMonthWorkoutStats(year: number, month: number, workoutData: WorkoutData) {
    const stats = {
      totalWorkouts: 0,
      completedWorkouts: 0,
      workoutTypes: {} as Record<string, number>
    };

    Object.entries(workoutData).forEach(([dateStr, workout]) => {
      const date = new Date(dateStr);
      if (date.getFullYear() === year && date.getMonth() === month) {
        stats.totalWorkouts++;
        
        if (workout.status === 'done') {
          stats.completedWorkouts++;
        }
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        const type = workout.type || '–¥—Ä—É–≥–æ–µ';
        stats.workoutTypes[type] = (stats.workoutTypes[type] || 0) + 1;
      }
    });

    return stats;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
   */
  private createNavigationControls(
    container: HTMLElement, 
    dataContainer: HTMLElement, 
    workoutData: WorkoutData, 
    context: MarkdownPostProcessorContext, 
    editor: InlineWorkoutEditor
  ) {
    const navControls = container.createDiv({ cls: 'workout-nav-controls' });

    // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ä–µ–∂–∏–º–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const modeButtons = navControls.createDiv({ cls: 'workout-mode-buttons' });
    
    const weekModeBtn = modeButtons.createEl('button', {
      text: '–ù–µ–¥–µ–ª—è',
      cls: `workout-mode-btn ${this.displayMode === 'week' ? 'active' : ''}`
    });
    
    const monthModeBtn = modeButtons.createEl('button', {
      text: '–ú–µ—Å—è—Ü',
      cls: `workout-mode-btn ${this.displayMode === 'month' ? 'active' : ''}`
    });
    
    const yearModeBtn = modeButtons.createEl('button', {
      text: '–ì–æ–¥',
      cls: `workout-mode-btn ${this.displayMode === 'year' ? 'active' : ''}`
    });

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
    const periodNav = navControls.createDiv({ cls: 'workout-period-nav' });
    
    const prevBtn = periodNav.createEl('button', {
      text: '‚Äπ',
      cls: 'workout-nav-btn workout-nav-prev'
    });

    const currentPeriod = periodNav.createDiv({ cls: 'workout-current-period' });
    this.updateCurrentPeriodDisplay(currentPeriod);

    const nextBtn = periodNav.createEl('button', {
      text: '‚Ä∫',
      cls: 'workout-nav-btn workout-nav-next'
    });

    // –ö–Ω–æ–ø–∫–∞ "–°–µ–≥–æ–¥–Ω—è"
    const todayBtn = periodNav.createEl('button', {
      text: '–°–µ–≥–æ–¥–Ω—è',
      cls: 'workout-nav-btn workout-nav-today'
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
    weekModeBtn.addEventListener('click', () => {
      this.displayMode = 'week';
      this.refreshDisplay(modeButtons, dataContainer, workoutData, context, editor);
    });

    monthModeBtn.addEventListener('click', () => {
      this.displayMode = 'month';
      this.refreshDisplay(modeButtons, dataContainer, workoutData, context, editor);
    });

    yearModeBtn.addEventListener('click', () => {
      this.displayMode = 'year';
      this.refreshDisplay(modeButtons, dataContainer, workoutData, context, editor);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prevBtn.addEventListener('click', () => {
      this.navigatePrevious();
      this.refreshCalendarView(dataContainer, workoutData, context, editor);
    });

    nextBtn.addEventListener('click', () => {
      this.navigateNext();
      this.refreshCalendarView(dataContainer, workoutData, context, editor);
    });

    todayBtn.addEventListener('click', () => {
      this.currentDate = new Date();
      this.refreshCalendarView(dataContainer, workoutData, context, editor);
    });
  }

  /**
   * –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
   */
  private navigatePrevious() {
    switch (this.displayMode) {
      case 'week':
        this.currentDate.setDate(this.currentDate.getDate() - 7);
        break;
      case 'month':
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
        break;
      case 'year':
        this.currentDate.setFullYear(this.currentDate.getFullYear() - 1);
        break;
    }
  }

  /**
   * –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–ø–µ—Ä–µ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
   */
  private navigateNext() {
    switch (this.displayMode) {
      case 'week':
        this.currentDate.setDate(this.currentDate.getDate() + 7);
        break;
      case 'month':
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
        break;
      case 'year':
        this.currentDate.setFullYear(this.currentDate.getFullYear() + 1);
        break;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å
   */
  private refreshDisplay(
    modeButtonsContainer: HTMLElement,
    dataContainer: HTMLElement,
    workoutData: WorkoutData,
    context: MarkdownPostProcessorContext,
    editor: InlineWorkoutEditor
  ) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    modeButtonsContainer.querySelectorAll('.workout-mode-btn').forEach(btn => {
      btn.removeClass('active');
    });
    modeButtonsContainer.querySelector(`.workout-mode-btn:nth-child(${this.displayMode === 'week' ? 1 : this.displayMode === 'month' ? 2 : 3})`)?.addClass('active');
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    this.refreshCalendarView(dataContainer, workoutData, context, editor);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
   */
  private updateCurrentPeriodDisplay(container: HTMLElement) {
    const monthNames = [
      '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
      '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];

    switch (this.displayMode) {
      case 'year':
        container.innerHTML = `
          <div class="workout-week-range">
            ${this.currentDate.getFullYear()} –≥–æ–¥
          </div>
          <div class="workout-month-year">
            –ì–æ–¥–æ–≤–æ–π –æ–±–∑–æ—Ä
          </div>
        `;
        break;
      case 'month':
        container.innerHTML = `
          <div class="workout-week-range">
            ${monthNames[this.currentDate.getMonth()]} ${this.currentDate.getFullYear()}
          </div>
          <div class="workout-month-year">
            –ú–µ—Å—è—á–Ω—ã–π –≤–∏–¥ (4 –Ω–µ–¥–µ–ª–∏)
          </div>
        `;
        break;
      default: // week
        const weekDates = this.getWeekDates(this.currentDate);
        const startDate = new Date(weekDates[0]);
        const endDate = new Date(weekDates[6]);
        
        container.innerHTML = `
          <div class="workout-week-range">
            ${this.formatDateShort(startDate)} - ${this.formatDateShort(endDate)}
          </div>
          <div class="workout-month-year">
            ${monthNames[this.currentDate.getMonth()]} ${this.currentDate.getFullYear()}
          </div>
        `;
        break;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –≤–∏–¥
   */
  private refreshCalendarView(
    container: HTMLElement, 
    workoutData: WorkoutData, 
    context: MarkdownPostProcessorContext, 
    editor: InlineWorkoutEditor
  ) {
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
    const periodContainer = container.querySelector('.workout-current-period') as HTMLElement;
    if (periodContainer) {
      this.updateCurrentPeriodDisplay(periodContainer);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–µ–ª—å, –Ω–µ –≤—Å—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    this.renderWeeksContent(container, workoutData, context, editor);
  }

  /**
   * –í–∏–¥ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
   */
  private renderListView(container: HTMLElement, workoutData: WorkoutData, context: MarkdownPostProcessorContext, editor: InlineWorkoutEditor) {
    container.addClass('workout-list-view');

    const sortedDates = Object.keys(workoutData).sort().reverse();

    if (sortedDates.length === 0) {
      container.createEl('div', {
        text: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        cls: 'workout-empty-state'
      });
      return;
    }

    sortedDates.forEach(dateStr => {
      const workout = workoutData[dateStr];
      const workoutItem = container.createDiv({ cls: 'workout-list-item' });
      
      const workoutDate = workoutItem.createDiv({ cls: 'workout-date' });
      workoutDate.createSpan({ text: this.formatDate(new Date(dateStr)), cls: 'date-text' });
      workoutDate.createSpan({ text: workout.status, cls: `status status-${workout.status}` });

      this.renderWorkoutCard(workoutItem, workout, dateStr, workoutData, context, editor, false);
    });
  }

  /**
   * –í–∏–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private renderStatsView(container: HTMLElement, workoutData: WorkoutData, context: MarkdownPostProcessorContext, editor: InlineWorkoutEditor) {
    container.addClass('workout-stats-view');

    const stats = this.calculateStats(workoutData);

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const generalStats = container.createDiv({ cls: 'workout-general-stats' });
    generalStats.createEl('h4', { text: '–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' });

    const statsGrid = generalStats.createDiv({ cls: 'stats-grid' });
    
    Object.entries(stats.general).forEach(([key, value]) => {
      const statItem = statsGrid.createDiv({ cls: 'stat-item' });
      statItem.createSpan({ text: this.getStatLabel(key), cls: 'stat-label' });
      statItem.createSpan({ text: value.toString(), cls: 'stat-value' });
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü
    if (Object.keys(stats.byMuscleGroup).length > 0) {
      const muscleStats = container.createDiv({ cls: 'workout-muscle-stats' });
      muscleStats.createEl('h4', { text: '–ü–æ –≥—Ä—É–ø–ø–∞–º –º—ã—à—Ü' });

      Object.entries(stats.byMuscleGroup).forEach(([group, count]) => {
  const groupItem = muscleStats.createDiv({ cls: 'muscle-group-item' });
        // render group name as a pill for better contrast
        const span = groupItem.createSpan({ text: group, cls: 'group-name pill' });
        // if a color is defined in the shared type map, apply it and pick readable text color
        try {
          // import of MUSCLE_GROUP_COLORS isn't available here; try reading from types map via global require if present
          const mgColors: any = require('../types').MUSCLE_GROUP_COLORS;
          const bg = mgColors && mgColors[group];
          if (bg) {
            span.style.background = bg;
            const c = bg.replace('#','');
            if (/^[0-9A-Fa-f]{6}$/.test(c)) {
              const r = parseInt(c.substring(0,2),16);
              const g = parseInt(c.substring(2,4),16);
              const b = parseInt(c.substring(4,6),16);
              const luminance = (0.299*r + 0.587*g + 0.114*b) / 255;
              span.style.color = luminance > 0.6 ? 'var(--text-normal)' : 'var(--text-on-accent)';
            }
          }
        } catch (e) {
          // ignore if require fails in bundler
        }
        groupItem.createSpan({ text: count.toString(), cls: 'group-count' });
      });
    }
  }

  /**
   * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
   */
  private renderWorkoutCard(
    container: HTMLElement, 
    workout: WorkoutEntry, 
    dateStr: string,
    workoutData: WorkoutData,
    context: MarkdownPostProcessorContext,
    editor: InlineWorkoutEditor,
    compact: boolean = true
  ) {
    const card = container.createDiv({ cls: `workout-card status-${workout.status}` });

    // –î–æ–±–∞–≤–ª—è–µ–º drag-n-drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    card.draggable = true;
    card.setAttribute('data-workout-date', dateStr);
    
    card.addEventListener('dragstart', (e) => {
      e.dataTransfer!.setData('text/plain', dateStr);
      e.dataTransfer!.setData('workout-data', JSON.stringify(workout));
      card.addClass('dragging');
    });

    card.addEventListener('dragend', () => {
      card.removeClass('dragging');
    });

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
    const cardHeader = card.createDiv({ cls: 'workout-card-header' });
    cardHeader.createSpan({ text: workout.type, cls: 'workout-type' });

    const cardActions = cardHeader.createDiv({ cls: 'workout-card-actions' });
    
    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const editBtn = cardActions.createEl('button', { text: '‚úèÔ∏è', cls: 'workout-action-btn' });
    editBtn.addEventListener('click', () => {
      editor.showEditWorkoutForm(dateStr, workout);
    });

    // –ó–∞–º–µ—Ç–∫–∏
    if (workout.notes) {
      card.createDiv({ text: workout.notes, cls: 'workout-notes' });
    }

    // –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –≤–∏–¥)
    if (workout.exercises && workout.exercises.length > 0) {
      const exercises = card.createDiv({ 
        cls: compact ? 'workout-exercises compact' : 'workout-exercises' 
      });
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ
      workout.exercises.forEach(exercise => {
        const exerciseEl = exercises.createDiv({ cls: 'exercise-item' });
        
        // –ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        exerciseEl.createDiv({ text: exercise.name, cls: 'exercise-name' });
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º –ø–æ–¥—Ö–æ–¥–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if (exercise.sets && exercise.sets.length > 0) {
          const ol = exerciseEl.createEl('ol', { cls: 'exercise-sets-list' });
          exercise.sets.forEach((set) => {
            const li = ol.createEl('li', { cls: 'exercise-set-detail' });
            let setText = `${set.reps} –ø–æ–≤—Ç.`;

            if (set.weight && set.weight > 0) {
              setText += ` √ó ${set.weight} –∫–≥`;
            }

            if (set.intensity && set.intensity > 0) {
              setText += ` (${Math.round(set.intensity)}%)`;
            }

            if (set.notes) {
              setText += ` - ${set.notes}`;
            }

            li.textContent = setText;
          });
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 1–ü–ú –µ—Å–ª–∏ –µ—Å—Ç—å
        if (exercise.currentOneRM && exercise.currentOneRM > 0) {
          const oneRmInfo = exerciseEl.createDiv({ cls: 'exercise-one-rm-info' });
          oneRmInfo.textContent = `1–ü–ú: ${exercise.currentOneRM} –∫–≥`;
        }
      });
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private getWeekDates(date: Date): string[] {
    const week = [];
    const startOfWeek = new Date(date);
    const day = startOfWeek.getDay();
    const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);
    startOfWeek.setDate(diff);

    for (let i = 0; i < 7; i++) {
      const currentDate = new Date(startOfWeek);
      currentDate.setDate(startOfWeek.getDate() + i);
      week.push(currentDate.toISOString().split('T')[0]);
    }
    return week;
  }

  private getDayName(date: Date): string {
    const days = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
    return days[date.getDay()];
  }

  private formatDate(date: Date): string {
    return date.toLocaleDateString('ru-RU');
  }

  private formatDateShort(date: Date): string {
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    return `${day}.${month}`;
  }

  private calculateStats(workoutData: WorkoutData) {
    const stats = {
      general: {
        total: 0,
        done: 0,
        planned: 0,
        skipped: 0,
        illness: 0
      },
      byMuscleGroup: {} as Record<string, number>
    };

    Object.values(workoutData).forEach(workout => {
      stats.general.total++;
      if (stats.general[workout.status] !== undefined) {
        stats.general[workout.status]++;
      }
      
      if (stats.byMuscleGroup[workout.type]) {
        stats.byMuscleGroup[workout.type]++;
      } else {
        stats.byMuscleGroup[workout.type] = 1;
      }
    });

    return stats;
  }

  private getStatLabel(key: string): string {
    const labels: Record<string, string> = {
      total: '–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
      done: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ',
      planned: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
      skipped: '–ü—Ä–æ–ø—É—â–µ–Ω–æ',
      illness: '–ë–æ–ª–µ–∑–Ω—å'
    };
    return labels[key] || key;
  }
}